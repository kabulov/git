
it is a strange story...
after setting up a hg repo on a linux based server through apache,
i was asked to set up a git repo for developers needs.
It is important to point out that I was newbie in git.

It turned out that there are several tools for that:
1. git-daemon - fast, git protocol
2. gitweb - with interface and other fancynesses
3. and so on

hg serve allows to specify port, ip, user, group, pid file and others.
same for git-daemon, so i opted to set up a repo using it.

then there were many small and big misunderstandings of this tool in the following order of research:
1. it uses git:// - its own protocol. Not http:// 
2. mkdir repo
3. cd repo
4. git [--bare] init --shared=true (./git/config -> [core] sharedrepository = 1)
(--bare or 7.)
5. touch git-daemon-export-ok
6. git daemon \
--verbose --base-path=/path-to-hg-and-git-repos/git/ \
--enable=receive-pack --pid-file=/var/run/git-daemon.pid --informative-errors
7. git checkout -b repo 
(here new branch 'repo', master remains)
(use this or --bare when init)

but none of this will work until you do a magic :

on a server side
1. mcedit /usr/bin/git
2. find 'report-status delete-refs side-band-64k'
3. change the word 'band' to 'bond'
4. save - mcedit asks to detach hard links - choose 'no'
5. steps 1-7 now will give the desired result

i spent a whole lot of time to make it work.
it is painful sometimes....

errors and related urls:

1. refusing to update checked out branch: refs/heads/master
http://russianpenguin.ru/2014/07/27/git-%D0%B2%D1%8B%D0%B4%D0%B5%D0%BB%D1%8F%D0%B5%D0%BC-%D0%B3%D0%BB%D0%BE%D0%B1%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%B0%D1%80%D0%B8%D0%B9-%D0%B4%D0%BB%D1%8F/

2. refusing to update checked out branch: refs/heads/master
bare versus non bare
http://bitflop.com/tutorials/git-bare-vs-non-bare-repositories.html

3. git checkout or merge
http://git-scm.com/book/ru/v1/%D0%92%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-Git-%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-%D0%B2%D0%B5%D1%82%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B8-%D1%81%D0%BB%D0%B8%D1%8F%D0%BD%D0%B8%D1%8F

1,2,3 but stackoverflow
http://stackoverflow.com/questions/8985782/git-push-fails-refusing-to-update-checked-out-branch-refs-heads-master
http://stackoverflow.com/questions/11117823/git-push-error-refusing-to-update-checked-out-branch

4. mcedit recommends removing hard links when saving
http://unix.stackexchange.com/questions/75564/why-does-mcedit-recommend-removing-hardlinks-when-saving-a-file

5. pushing to a remote
https://help.github.com/articles/pushing-to-a-remote/

6. git through ssh and other stuff
http://git-scm.com/book/ru/v1/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5

7. git daemon man page
http://git-scm.com/docs/git-daemon

8. how to set up a git repo - general advise
http://codebyexample.info/2012/09/14/how-to-setup-a-git-daemon/

9. git push hangs !!!
https://github.com/msysgit/git/issues/101#issuecomment-29885687
http://billauer.co.il/blog/2012/10/git-pull-windows-freeze-receive-pack/
https://github.com/msysgit/git/blob/master/send-pack.c
https://github.com/msysgit/git/issues/101
http://stackoverflow.com/questions/3802188/git-push-hangs-and-does-nothing
http://stackoverflow.com/questions/7104182/git-push-halts-on-writing-objects-100
http://stackoverflow.com/questions/5520329/why-does-a-git-push-just-hang-there-indefinitely-using-mysysgit-1-7-4

10. advise
http://eax.me/git-commands/

scripts:

0.
/etc/init.d/git-daemon

PIDFILE=something
BASEPATH=something
LOGFILE=something

start() {
	[ -e /lib/librc.so ] || BL1_COMPAT="--name git-daemon"
	ebegin "Starting git-daemon"
		#start-stop-daemon --start --verbose --background \
		#--pidfile ${PIDFILE} ${BL1_COMPAT} \
		#--exec /usr/bin/git -- daemon \
		#	--pid-file=${PIDFILE} \
		#	--user=${GIT_USER} --group=${GIT_GROUP} \
		#	${GITDAEMON_OPTS}
		
		start-stop-daemon --start --verbose --background \
		--pidfile ${PIDFILE} ${BL1_COMPAT} \
		--stderr ${LOGFILE} \
		--stdout ${LOGFILE} \
		--exec /usr/bin/git -- daemon \
		    --pid-file=${PIDFILE} \
		    --base-path=${BASEPATH} \
		    --enable=receive-pack \
		    --informative-errors \
		    --verbose
		
		#echo "start paraview-new daemon"
		#git daemon --verbose --base-path=/srv/repository/git --enable=receive-pack --pid-file=/var/run/git-daemon.pid --infromative-errors >/var/log/git/paraview-git.log 2>&1 &
		#echo "done"
	eend $?
}

1.

#!/bin/bash

#git daemon --verbose \
#	    --pid-file=/var/run/git-daemon.pid \
#	    --user=apache \
#	    --group=apache \
#	    --informative-errors \
#	    --enable=receive-pack \
#	    /srv/repository/paraview-git \
#	    > /var/log/git/paraview-git.log 2>&1 &
#	    
git daemon --verbose --base-path=/srv/repository/git --enable=receive-pack --pid-file=/var/run/git-daemon.pid --informative-errors >/var/log/git/paraview-git.log 2>&1 &

2.

#create git-daemon-export-ok
#redirect output to (log) - foo > allout.txt 2>&1

 git-daemon --verbose \
			--pid-file=/var/run/git-daemon.pid \
			--listen=127.0.21.10 \
			--port=8000 \
			--user=apache \
			--group=apache \
			/srv/repository/paraview-git \
			>/var/log/git/paraview-git.log 2>&1 \
			

note:

sed 's/report-status delete-refs side-band-64k/report-status delete-refs side-bond-64k/g' -i /path/to/git-daemon

just for the future

git://clare/ParaView
git remote -v
$ git clone --recursive https://gitlab.kitware.com/paraview/paraview.git ParaView
$ cd ParaView
$ git pull
$ git submodule update --init
